search()
library(rlang)
search()
cnd <- catch_cnd(stop("An error"))
cnd
str(cnd)
fn <- function() {
tryCatch(
error = function(cnd) {
paste0("--", conditionMessage(cnd), "--")
},
stop("This is an error")
)
}
fn()
fn <- function() {
tryCatch(
error = function(cnd) {
paste0("--", conditionMessage(cnd), "--")
},
stop("This is an error"),
finally = {
paste0("--", "  Finally!! ", "--")
}
)
}
fn()
fn <- function() {
tryCatch(
error = function(cnd) {
paste0("--", conditionMessage(cnd), "--")
},
stop("This is an error"),
finally = {
cat(paste0("--", "  Finally!! ", "--"))
}
)
}
fn()
fn <- function() {
tryCatch(
error = function(cnd) {
paste0("--", conditionMessage(cnd), "--")
},
stop("This is an error"),
finally = {
cat(paste0("--", "  Finally!! ", "--n"))
}
)
}
fn()
fn <- function() {
tryCatch(
error = function(cnd) {
paste0("--", conditionMessage(cnd), "--")
},
stop("This is an error"),
finally = {
cat(paste0("--", "  Finally!! ", "--\n"))
}
)
}
fn()
knitr::opts_chunk$set(echo = TRUE)
withCallingHandlers(
message = function(cnd) cat("Level 2\n"),
withCallingHandlers(
message = function(cnd) {
cat("Level 1\n")
cnd_muffle(cnd)
},
message("Hello")
)
)
fn()
fn <- function() {
withCallingHandlers(
message = function(cnd) cat("Level 2\n"),
withCallingHandlers(
message = function(cnd) {
cat("Level 1\n")
cnd_muffle(cnd)
},
message("Hello")
)
)
}
fn()
fn <- function() {
withCallingHandlers(
message = function(cnd) cat("Level 2\n"),
withCallingHandlers(
message = function(cnd) {
cat("Level 1\n")
cnd_muffle(cnd)
}, {
message("Hello")
}
)
)
}
fn()
fn <- function() {
withCallingHandlers(
message = function(cnd) cat("Level 2\n"),
withCallingHandlers(
message = function(cnd) {
cat("Level 1\n")
cnd_muffle(cnd)
}, {
message("Hello")
cat("bye")
}
)
)
}
fn()
a <- c(1,2,3)
a
a * 3
a <- map_dbl(mtcars, mean)
library(purrr)
install.packages("purrr")
library(purrr)
a <- map_dbl(mtcars, mean)
a
str(a)
typeof(quote(x * 10))
quote(x * 10)
typeof(x * 10)
x<- c(1,3)
typeof(x * 10)
typeof(map(x, ~ x. * 2))
typeof(map(x, ~ .x * 2))
typeof(quote("ff"))
class(quote(x * 10))
c <- y ~ x
d <- y ~ x + b
c
class(c)
c(3)
d(4)
d
d(3,4)
e <- ~ x + y + z
f <- y ~ x + b
# Return the length of `g`
length(e)
length(f)
# Retrieve the elements at index 1 and 2
e[[1]]
e[[2]]
f[[3]]
f
i <- y ~ x
j <- y ~ x + x1
k <- y ~ x + x1 + x2
# Concatentate
formulae <- list(as.formula(i),as.formula(j),as.formula(k))
# Double check the class of the list elements
class(formulae[[1]])
formulae
i <- y ~ x
j <- y ~ x + x1
k <- y ~ x + x1 + x2
tt <- list(i,j,k)
tt
class(tt[[1]])
~~class(function(x) length(unique(x))
class(function(x) length(unique(x))
f < function(x) length(unique(x)
)
f <- function(x) length(unique(x))
f
class (f)
x <- list(
list(-1, x = 1, y = c(2), z = "a"),
list(-2, x = 4, y = c(5, 6), z = "b"),
list(-3, x = 8, y = c(9, 10, 11))
)
map_dbl(x, list("y", 1))
map_dbl(x, "y")
map_dbl(x, "y"[[1]])
map_dbl(x, "y"[1])
map_dbl(x, "y")
map_dbl(x, "y"[[[1]]])
map_dbl(x, "y")
map_dbl(x, "x")
map_dbl(x = x, "x")
map_dbl(x = x, .f = "x")
map_dbl(x = x, ~ .x + 1)
map_dbl(x = x, .f = function(r) r + 1)
i03 <- function(...) {
list(first = ..1, third = ..3)
}
y <- 10
i03 <- function(...) {
y <- ...
}
i03(2,4,"dd")
i03 <- function(...) {
y <- list(...)
}
i03(2,4,"dd")
y
y
by_cyl <- split(mtcars, mtcars$cyl)
by_cyl
str(by_cyl)
names(by_cyl)
by_cyl %>%
map(~ lm(mpg ~ wt, data = .x))
ff <- by_cyl %>%
map(~ lm(mpg ~ wt, data = .x))
ff
ff[[1]]
str(ff[[1]])
coeff(ff[[1]])
coef(ff[[1]])
str(coef(ff[[1]]))
df <- data.frame(
x = 1:3,
y = 6:4
)
df
str(df)
str(map(df, ~ .x * 2))
modify(df, ~ .x * 2)
df
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
str(df)
df
df <- data.frame(
num1 = c(0, 10, 20),
num2 = c(5, 6, 7),
chr1 = c("a", "b", "c"),
stringsAsFactors = FALSE
)
df
str(map_if(df, is.numeric, mean))
library(rlang)
library(ggplot2)
library(scales)
install.packages("ggplo2")
install.packages("scales")
install.packages("ggplot2")
sd <- c(1, 5, 15)
n <- 100
df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))
df
typeof(factor("x"))
class(factor("x"))
sloop::s3_class(1)
install.packages("sloop")
sloop::s3_class(1)
sloop::s3_class(factor("x"))
f <- factor(c("a", "b", "c"))
f
names(f)
str(f)
f$names
f$name
f$class
attributes(f)
names(f)
f$levels
str(f)
x <- factor(c("a", "b", "b", "a"))
x
str(x)
x
attributes(x)
grade <- ordered(c("b", "b", "a", "c"), levels = c("c", "b", "a"))
grade
str(grade)
attributes(grade)
ftype(print)
library(sloop)
ftype(print)
time <- strptime(c("2017-01-01", "2020-05-04 03:21"), "%Y-%m-%d")
class(time)
attributes(print)
s3_get_method(t.test)
s3_get_method(print)
s3_get_method(weighted.mean.Date)
s3_get_method(weighted.mean)
mod <- lm(log(mpg) ~ log(disp), data = mtcars)
str(mod)
x = double()
x
new_Date <- function(x = double()) {
stopifnot(is.double(x))
structure(x, class = "Date")
}
new_Date(c(-1, 0, 1))
new_Date("dd")
mean
str(mean)
sloop::s3_class(mean)
x <- Sys.Date()
s3_dispatch(print(x))
t()
str(t)
src(t)
getAnywhere(t.ts)
getAnywhere(t)
s3_dispatch(t(x))
getAnywhere(t.Date)
getAnywhere(t.default)
t.test
s3_dispatch(t.test(x))
print
class(print)
str(print)
methods(print)
methods(print.ts)
print.ordered()
new_secret <- function(x = double()) {
stopifnot(is.double(x))
structure(x, class = "secret")
}
print.secret <- function(x, ...) {
print(strrep("x", nchar(x)))
invisible(x)
}
x <- new_secret(c(15, 1, 456))
x
strrep("x", nchar(c(1,22,333)))
nchar(c(1,22,333)
)
class(x)
str(x)
print(x)
str(x)
class(x)
`[.secret` <- function(x, i) {
new_secret(NextMethod())
}
x[1]
s3_dispatch(x[1])
new_secret <- function(x, ..., class = character()) {
stopifnot(is.double(x))
structure(
x,
...,
class = c(class, "secret")
)
}
x <- new_secret(c(15, 1, 456))
x
str(x)
class(x)
new_supersecret <- function(x) {
new_secret(x, class = "supersecret")
}
print.supersecret <- function(x, ...) {
print(rep("xxxxx", length(x)))
invisible(x)
}
x2 <- new_supersecret(c(15, 1, 456))
x2
s3_class(x)
s3_class(x2)
